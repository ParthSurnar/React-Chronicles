// ===================================================
// üî• TYPESCRIPT FUNCTIONS: COMPLETE SUMMARY üî•
// ===================================================
// üìå Functions are reusable blocks of code that perform a task.
// üìå TypeScript enhances JavaScript functions by adding type safety.
// üìå Functions can have explicit return types for better type checking.
// ===================================================

// 1Ô∏è‚É£ FUNCTION DECLARATION
// - Basic way to define a function using the function keyword.

// 2Ô∏è‚É£ FUNCTION RETURN TYPES
// - Explicitly define the type of value a function returns.

// 3Ô∏è‚É£ VOID FUNCTIONS
// - Used when a function does not return anything.

// 4Ô∏è‚É£ OPTIONAL PARAMETERS
// - Use `?` to make function parameters optional.

// 5Ô∏è‚É£ DEFAULT PARAMETERS
// - Assign default values to parameters if not provided.

// 6Ô∏è‚É£ REST PARAMETERS
// - Use `...args` to handle multiple arguments as an array.

// 7Ô∏è‚É£ FUNCTION OVERLOADING
// - Define multiple function signatures for different parameter types.

// 8Ô∏è‚É£ ARROW FUNCTIONS (=>)
// - Shorter syntax for writing functions.

// 9Ô∏è‚É£ ANONYMOUS FUNCTIONS
// - Functions without a name, often used as callbacks.

// üîü CALLBACK FUNCTIONS
// - Functions passed as arguments to another function.

// 1Ô∏è‚É£1Ô∏è‚É£ HIGHER-ORDER FUNCTIONS
// - Functions that take or return other functions.

// 1Ô∏è‚É£2Ô∏è‚É£ GENERIC FUNCTIONS
// - Functions that work with any type using generics (`T`).

// 1Ô∏è‚É£3Ô∏è‚É£ ASYNCHRONOUS FUNCTIONS (ASYNC/AWAIT)
// - Functions that handle asynchronous operations with promises.
